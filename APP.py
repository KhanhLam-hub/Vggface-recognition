from flask import Flask, request, jsonify
import numpy as np
import pickle
import cv2
import os
import requests

# ================== C·∫§U H√åNH ==================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")      
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  
API_KEY_UPLOAD = os.getenv("API_KEY_UPLOAD")       

# Link raw file embeddings tr√™n GitHub (thay b·∫±ng link c·ªßa b·∫°n)
EMBEDDINGS_URL = "https://raw.githubusercontent.com/KhanhLam-hub/Vggface-recognition/main/embeddings.pkl"

# G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông c·ªßa server ƒë·∫øn Telegram
def send_startup_message():
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
    if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        try:
            requests.post(url, data={
                "chat_id": TELEGRAM_CHAT_ID,
                "text": "üåê Server nh·∫≠n di·ªán khu√¥n m·∫∑t ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng v√† s·∫µn s√†ng ho·∫°t ƒë·ªông!"
            }, timeout=5)
            print("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông l√™n Telegram.")
        except Exception as e:
            print("‚ùå L·ªói g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông l√™n Telegram:", e)

app = Flask(__name__)

# ================== T·∫¢I EMBEDDINGS T·ª™ GITHUB V√Ä LOAD TR·ª∞C TI·∫æP ==================
def load_embeddings_from_github():
    try:
        print("‚è≥ ƒêang t·∫£i embeddings tr·ª±c ti·∫øp t·ª´ GitHub...")
        r = requests.get(EMBEDDINGS_URL, timeout=10)
        r.raise_for_status()
        embeddings_data = pickle.loads(r.content)
        print(f"‚úÖ T·∫£i embeddings th√†nh c√¥ng ({len(embeddings_data['person_names'])} entries).")
        return embeddings_data
    except Exception as e:
        print("‚ùå L·ªói t·∫£i embeddings t·ª´ GitHub:", e)
        return None
        
# Server kh·ªüi ƒë·ªông
send_startup_message()

# ================== G·ª¨I ·∫¢NH + C·∫¢NH B√ÅO TELEGRAM ==================
def send_telegram_alert(message, image=None):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": message}, timeout=5)
        if image is not None:
            files = {"photo": ("alert.jpg", image, "image/jpeg")}
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID}, files=files, timeout=5)
    except Exception as e:
        print("‚ùå L·ªói g·ª≠i Telegram:", e)

# ================== N·∫†P M√î H√åNH BAN ƒê·∫¶U ==================
embeddings_data = load_embeddings_from_github()
if embeddings_data:
    person_names = embeddings_data["person_names"]
    stored_embeddings = np.array(embeddings_data["embeddings"])
else:
    person_names = []
    stored_embeddings = np.array([])
    print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu embeddings, ·ª©ng d·ª•ng s·∫Ω ch·∫°y nh∆∞ng kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t")

# ================== ROUTE C∆† B·∫¢N CHO / ==================
@app.route("/", methods=["GET", "HEAD"])
def home():
    return jsonify({"status": "‚õπÔ∏èServer is runningüöÄ", "embeddings_loaded": bool(embeddings_data)})

# ================== API NH·∫¨N ·∫¢NH ==================
@app.route("/upload", methods=["POST"])
def upload_image():
    auth = request.headers.get("Authorization")
    if auth != f"Bearer {API_KEY_UPLOAD}":
        return jsonify({"error": "Unauthorized"}), 401
    if "image" not in request.files:
        return jsonify({"error": "Kh√¥ng c√≥ ·∫£nh g·ª≠i l√™n"}), 400

    # ƒê·ªçc v√† gi·∫£i m√£ ·∫£nh
    file = request.files["image"].read()
    np_img = np.frombuffer(file, np.uint8)
    frame = cv2.imdecode(np_img, cv2.IMREAD_COLOR)
    if frame is None:
        return jsonify({"error": "Kh√¥ng th·ªÉ gi·∫£i m√£ ·∫£nh"}), 400

    # Resize ·∫£nh v·ªÅ ƒë√∫ng k√≠ch th∆∞·ªõc cho VGG-Face
    try:
        frame = cv2.resize(frame, (224, 224), interpolation=cv2.INTER_AREA)
    except Exception as e:
        print("‚ùå L·ªói resize ·∫£nh:", e)
        return jsonify({"error": "Kh√¥ng th·ªÉ resize ·∫£nh"}), 500

    # Encode ·∫£nh ƒë√£ resize ƒë·ªÉ g·ª≠i Telegram (gi·∫£m dung l∆∞·ª£ng)
    _, img_encoded = cv2.imencode(".jpg", frame)
    img_bytes = img_encoded.tobytes()

    try:
        from deepface import DeepFace
        detections = DeepFace.represent(frame, model_name="VGG-Face", enforce_detection=False)
        if not detections:
            send_telegram_alert("üö® Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!", img_bytes)
            return jsonify({"result": "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t"})

        face_embedding = np.array(detections[0]["embedding"])
        if len(stored_embeddings) == 0:
            send_telegram_alert("üö® Kh√¥ng c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t!", img_bytes)
            return jsonify({"result": "Kh√¥ng c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t"})

        distances = np.linalg.norm(stored_embeddings - face_embedding, axis=1)
        min_dist = np.min(distances)
        idx = np.argmin(distances)
        name = person_names[idx] if min_dist < 0.5 else "Ng∆∞·ªùi l·∫°"

        if name == "Ng∆∞·ªùi l·∫°":
            send_telegram_alert("üö® Ph√°t hi·ªán NG∆Ø·ªúI L·∫†!", img_bytes)
        else:
            send_telegram_alert(f"‚úÖ Nh·∫≠n di·ªán: {name}", img_bytes)

        return jsonify({"name": name, "distance": float(min_dist)})
    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω ·∫£nh:", e)
        return jsonify({"error": str(e)}), 500

# ================== CH·∫†Y SERVER ==================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
