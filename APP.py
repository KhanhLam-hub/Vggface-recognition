from flask import Flask, request, jsonify
import numpy as np
import pickle
import cv2
import os
import requests
from io import BytesIO

# ================== C·∫§U H√åNH ==================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")       # Token bot Telegram
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")   # Chat ID nh·∫≠n c·∫£nh b√°o
API_KEY_UPLOAD = os.getenv("API_KEY_UPLOAD")       # API key x√°c th·ª±c t·ª´ ESP32
GITHUB_EMBEDDINGS_URL = os.getenv("GITHUB_EMBEDDINGS_URL")  # Link RAW t·ªõi embeddings.pkl tr√™n GitHub
LOCAL_EMBEDDINGS_PATH = "/opt/render/.deepface/weights/embeddings.pkl"  # ƒê∆∞·ªùng d·∫´n c·ª•c b·ªô d·ª± ph√≤ng

app = Flask(__name__)

# ================== T·∫¢I EMBEDDINGS T·ª™ GITHUB HO·∫∂C C·ª§C B·ªò ==================
def load_embeddings_from_github():
    """T·∫£i embeddings.pkl t·ª´ GitHub ho·∫∑c file c·ª•c b·ªô n·∫øu th·∫•t b·∫°i"""
    try:
        res = requests.get(GITHUB_EMBEDDINGS_URL, timeout=10)
        res.raise_for_status()
        
        # Ki·ªÉm tra n·ªôi dung c√≥ ph·∫£i nh·ªã ph√¢n h·ª£p l·ªá kh√¥ng
        if res.headers.get("content-type", "").startswith("text") or b"<html" in res.content[:100]:
            raise ValueError("T·∫£i v·ªÅ n·ªôi dung kh√¥ng ph·∫£i file pickle (c√≥ th·ªÉ l√† HTML)")
        
        embeddings_data = pickle.loads(res.content)
        print("‚úÖ T·∫£i embeddings t·ª´ GitHub th√†nh c√¥ng")
        return embeddings_data
    except Exception as e:
        print("‚ùå L·ªói t·∫£i embeddings t·ª´ GitHub:", e)
        # Th·ª≠ t·∫£i t·ª´ file c·ª•c b·ªô
        return load_embeddings_from_local()

def load_embeddings_from_local():
    """T·∫£i embeddings t·ª´ file c·ª•c b·ªô n·∫øu c√≥"""
    try:
        if os.path.exists(LOCAL_EMBEDDINGS_PATH):
            with open(LOCAL_EMBEDDINGS_PATH, "rb") as f:
                embeddings_data = pickle.load(f)
            print("‚úÖ T·∫£i embeddings t·ª´ file c·ª•c b·ªô th√†nh c√¥ng")
            return embeddings_data
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file embeddings c·ª•c b·ªô t·∫°i", LOCAL_EMBEDDINGS_PATH)
            return None
    except Exception as e:
        print("‚ùå L·ªói t·∫£i embeddings c·ª•c b·ªô:", e)
        return None

# ================== G·ª¨I ·∫¢NH + C·∫¢NH B√ÅO TELEGRAM ==================
def send_telegram_alert(message, image=None):
    """G·ª≠i tin nh·∫Øn + ·∫£nh c·∫£nh b√°o t·ªõi Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": message}, timeout=5)

        if image is not None:
            files = {"photo": ("alert.jpg", image, "image/jpeg")}
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID}, files=files, timeout=5)
    except Exception as e:
        print("‚ùå L·ªói g·ª≠i Telegram:", e)

# ================== N·∫†P M√î H√åNH BAN ƒê·∫¶U ==================
embeddings_data = load_embeddings_from_github()
if embeddings_data:
    person_names = embeddings_data["person_names"]
    stored_embeddings = np.array(embeddings_data["embeddings"])
else:
    person_names = []
    stored_embeddings = np.array([])
    print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu embeddings, ·ª©ng d·ª•ng s·∫Ω ch·∫°y nh∆∞ng kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t")

# ================== ROUTE C∆† B·∫¢N CHO / ==================
@app.route("/", methods=["GET", "HEAD"])
def home():
    """Route c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra server"""
    return jsonify({"status": "Server is running", "embeddings_loaded": bool(embeddings_data)})

# ================== API NH·∫¨N ·∫¢NH ==================
@app.route("/upload", methods=["POST"])
def upload_image():
    """Nh·∫≠n ·∫£nh t·ª´ ESP32-CAM, so kh·ªõp khu√¥n m·∫∑t"""
    auth = request.headers.get("Authorization")
    if auth != f"Bearer {API_KEY_UPLOAD}":
        return jsonify({"error": "Unauthorized"}), 401

    if "image" not in request.files:
        return jsonify({"error": "Kh√¥ng c√≥ ·∫£nh g·ª≠i l√™n"}), 400

    file = request.files["image"].read()
    np_img = np.frombuffer(file, np.uint8)
    frame = cv2.imdecode(np_img, cv2.IMREAD_COLOR)
    if frame is None:
        return jsonify({"error": "Kh√¥ng th·ªÉ gi·∫£i m√£ ·∫£nh"}), 400

    try:
        from deepface import DeepFace  # Import ch·∫≠m ƒë·ªÉ gi·∫£m th·ªùi gian kh·ªüi ƒë·ªông
        detections = DeepFace.represent(frame, model_name="VGG-Face", enforce_detection=False)
        if not detections:
            send_telegram_alert("üö® Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!", file)
            return jsonify({"result": "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t"})

        face_embedding = np.array(detections[0]["embedding"])
        if len(stored_embeddings) == 0:
            send_telegram_alert("üö® Kh√¥ng c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t!", file)
            return jsonify({"result": "Kh√¥ng c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t"})

        distances = np.linalg.norm(stored_embeddings - face_embedding, axis=1)
        min_dist = np.min(distances)
        idx = np.argmin(distances)
        name = person_names[idx] if min_dist < 0.5 else "Ng∆∞·ªùi l·∫°"

        if name == "Ng∆∞·ªùi l·∫°":
            send_telegram_alert("üö® Ph√°t hi·ªán NG∆Ø·ªúI L·∫†!", file)
        else:
            send_telegram_alert(f"‚úÖ Nh·∫≠n di·ªán: {name}", file)

        return jsonify({"name": name, "distance": float(min_dist)})

    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω ·∫£nh:", e)
        return jsonify({"error": str(e)}), 500

# ================== CH·∫†Y SERVER ==================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
